{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MyMapComponent","compose","withProps","googleMapURL","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","withState","withHandlers","refs","map","undefined","onMapMounted","ref","fetchPlaces","_ref","updatePlaces","request","bounds","getBounds","type","language","google","maps","places","PlacesService","context","__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","nearbySearch","results","status","PlacesServiceStatus","OK","console","log","onToggleOpen","_ref2","updateSelectedPlace","key","props","lib","onTilesLoaded","onBoundsChanged","defaultZoom","defaultCenter","lat","lng","place","i","onClick","position","geometry","location","selectedPlace","onCloseClick","fontSize","name","Fragment","App","React","PureComponent","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAKMA,EAAiBC,YACnBC,YAAU,CACNC,aAAc,wHACdC,eAAgBC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,WACpCC,iBAAkBL,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,WACtCE,WAAYN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAM,aAEpCG,eACAC,gBACAC,YAAU,SAAU,eAAgB,IACpCA,YAAU,gBAAiB,sBAAuB,MAClDC,YAAa,WACT,IAAMC,EAAO,CACTC,SAAKC,GAGT,MAAO,CACHC,aAAc,kBAAM,SAAAC,GAChBJ,EAAKC,IAAMG,IAEfC,YAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAH,OAAsB,WAC/B,IAGMC,EAAU,CACZC,OAHWT,EAAKC,IAAIS,YAIpBC,KAAM,CAAC,YACPC,SAAU,SAJE,IAAIC,OAAOC,KAAKC,OAAOC,cAAchB,EAAKC,IAAIgB,QAAQC,8CAM9DC,aAAaX,EAAS,SAACY,EAASC,GAChCA,GAAUR,OAAOC,KAAKC,OAAOO,oBAAoBC,KACjDC,QAAQC,IAAIL,GACZb,EAAaa,QAIzBM,aAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,oBAAH,OAA6B,SAAAC,GACvCD,EAAoBC,QArCb5C,CAyCrB,SAAC6C,GAEC,OADAN,QAAQC,IAAIK,GAERzC,EAAAC,EAAAC,cAACwC,EAAA,UAAD,CACIC,cAAeF,EAAMzB,YACrBD,IAAK0B,EAAM3B,aACX8B,gBAAiBH,EAAMzB,YACvB6B,YAAa,GACbC,cAAe,CAAEC,KAAM,YAAaC,KAAM,cAEzCP,EAAMf,QAAUe,EAAMf,OAAOd,IAAI,SAACqC,EAAOC,GAAR,OAC9BlD,EAAAC,EAAAC,cAACwC,EAAA,OAAD,CAAQS,QAAS,kBAAMV,EAAMJ,aAAaa,IAAIV,IAAKU,EAAGE,SAAU,CAAEL,IAAKE,EAAMI,SAASC,SAASP,MAAOC,IAAKC,EAAMI,SAASC,SAASN,QAC9HP,EAAMc,gBAAkBL,GAAKlD,EAAAC,EAAAC,cAACwC,EAAA,WAAD,CAAYc,aAAcf,EAAMJ,cAC1DrC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACsD,SAAU,KAClBhB,EAAMf,OAAOe,EAAMc,eAAeG,KAClCvB,QAAQC,IAAIc,GACX,WACA,OAAQA,EAAE,GACR,KAAK,EAAK,OACRlD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACA3D,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,+CAGF,KAAK,EAAK,OACRF,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACA3D,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,uCAGF,QAAU,OACRF,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0D,SAAA,KACA3D,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,gDApBJ,WAiCT0D,mLAEb,OACI5D,EAAAC,EAAAC,cAACP,EAAD,aAHqBkE,IAAMC,eCnFnBC,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee9f0f31.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nimport React from \"react\"\nimport { compose, withProps, withHandlers, withState, withStateHandlers } from 'recompose'\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\n\nconst MyMapComponent = compose(\n    withProps({\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyAv4rjIpoA2JGYFekhcmKc0CI5x097jNDE&libraries=geometry,drawing,places\",\n        loadingElement: <div style={{ height: `100vh` }} />,\n        containerElement: <div style={{ height: `100vh` }} />,\n        mapElement: <div style={{ height: `100vh` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap,\n    withState('places', 'updatePlaces', ''),\n    withState('selectedPlace', 'updateSelectedPlace', null),\n    withHandlers(() => {\n        const refs = {\n            map: undefined,\n        }\n\n        return {\n            onMapMounted: () => ref => {\n                refs.map = ref\n            },\n            fetchPlaces: ({ updatePlaces }) => () => {\n                let places;\n                const bounds = refs.map.getBounds();\n                const service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n                const request = {\n                    bounds: bounds,\n                    type: ['hospital'],\n                    language: \"pt-BR\"\n                };\n                service.nearbySearch(request, (results, status) => {\n                    if (status == google.maps.places.PlacesServiceStatus.OK) {\n                        console.log(results);\n                        updatePlaces(results);\n                    }\n                })\n            },\n            onToggleOpen: ({ updateSelectedPlace }) => key => {\n                updateSelectedPlace(key);\n            }\n        }\n    }),\n)((props) => {\n    console.log(props);\n    return (\n        <GoogleMap\n            onTilesLoaded={props.fetchPlaces}\n            ref={props.onMapMounted}\n            onBoundsChanged={props.fetchPlaces}\n            defaultZoom={18}\n            defaultCenter={{ lat: -22.90869684, lng: -43.19036293 }}\n        >\n            {props.places && props.places.map((place, i) =>\n                <Marker onClick={() => props.onToggleOpen(i)} key={i} position={{ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }}>\n                    {props.selectedPlace === i && <InfoWindow onCloseClick={props.onToggleOpen}>\n                        <div style={{fontSize: 16}}>\n                            {props.places[props.selectedPlace].name}\n                            {console.log(i)}\n                            {(() => {\n                              switch (i%2) {\n                                case 0:   return (\n                                  <>\n                                  <div>Status: Gerador Ativado</div>\n                                  <div>Diesel: 89%</div>\n                                  <div>12 minutos sem rede elétrica</div>\n                                  </>\n                                  );\n                                case 1:   return (\n                                  <>\n                                  <div>Status: Energia Ativada</div>\n                                  <div>Diesel: 54%</div>\n                                  <div>Rede elétrica normal</div>\n                                  </>\n                                  );\n                                default:  return (\n                                  <>\n                                  <div>Status: Gerador Ativador</div>\n                                  <div>Diesel: 89%</div>\n                                  <div>15 minutos sem rede elétrica</div>\n                                  </>\n                                  );\n                              }\n                            })()}\n                        </div>\n                    </InfoWindow>}\n                </Marker>\n            )}\n        </GoogleMap>\n    )\n})\n\nexport default class App extends React.PureComponent {\n    render() {\n        return (\n            <MyMapComponent />\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}